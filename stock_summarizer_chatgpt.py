# -*- coding: utf-8 -*-
"""StockSummarizer.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yLvRtDr4OOiaFpdFU7gWDTuP1QGZeLTP
"""

! pip install --upgrade openai

# imports
import openai
import os
import json
import time
import ast
from openai import OpenAI

# constants
tickers_list = ['NVDA', 'AMD', 'PLTR', 'DUOL', 'BYND']
articles_data_path = "/content/stock_summary_data.json" # TO DO: upload this to repo
custom_prompt_selector = {
    "beginner": [False, "Provide stock analysis for a beginner investor including the revenue model, business stand and position in the market. "],
    "expert": [True, "Provide stock analysis for an expert investor including the risk factor by classifying it among High, low or medium; returns expected in high(greater than 15% per annum), medium(between 5% to 15% per annum) ,low(less than 5% per annum); Suggested investment duration among short term(within months) or longterm(within years). For every every decision you make provide a reason correleating it with stock price and market perfromance. "],
    "SWOT": [True, "Include SWOT analysis, by listing top 3 strengths, weaknesses, Opportunities and Threats. If possible add if the above points are for short term or long term. "],
    "competitive": [False, "Compare the current stock and its potential competitor interms of 'Market size', 'revenue stream', their strengths. For every comparison provide which stock is better. And in the end provide which stock is better based on your overall analysis. "]
}
os.environ["OPENAI_API_KEY"] = "YOUR-OPEN-API-KEY"

# TO DO:  fetch from frontend
current_ticker = 'BYND'
new_custom_prompt_selector = custom_prompt_selector.copy()
# TO DO: Based on frontend input
# new_custom_prompt_selector["beginner"] =
# new_custom_prompt_selector["expert"] =
# new_custom_prompt_selector["SWOT"] =
# new_custom_prompt_selector["competitive"] =

# construct prompt based on user input
def get_final_prompt(new_custom_prompt_selector):
    final_prompt = ""
    for prompt_type in new_custom_prompt_selector:
        if custom_prompt_selector[prompt_type][0]:
            final_prompt = final_prompt + custom_prompt_selector[prompt_type][1]
    print(final_prompt)
    return final_prompt
final_prompt = get_final_prompt(new_custom_prompt_selector)

news_articles_prompt = "You are stock news analyzer. Store key content of the news that impacts profit and loss of the company, Strengths, weaknesses, opportunities, threats."
prompt_to_combine = "Based on the list of summaries of articles content you have in a json format article, combine and summarize the news articles ina json format. Do not miss any key information that is useful for the user to decide stock performance."
sentiment_analysis_prompt = "You are a stock news article analyzer. Your task is to perform sentiment analysis of the given news article based on its impact on stock performance. Take your time to analyze the article thoroughly before providing your analysis. Consider factors such as company performance, market trends, and analyst opinions. Output a single word indicating whether the sentiment is *positive*, *negative*, or *neutral*."

"""Functions and prompts for ChatGPT API for
1. Single news article summary
2. Combining news articles
3. Sentiment analysis
"""

# function to summarize a single news article
news_article_summarizer_function = [
        {
            "name": "formatted_news_article_summary",
            "description": "Format the summary of the stock news in a JSON format.",
            "parameters": {
                "type": "object",
                "properties": {
                    "summary_line": {
                        "type": "string",
                        "description": ("Based on the news article content summarize the news article interms of correleation with stock price and impact."
                                        "Do not include its strength or weaknesses or threats or anything about the performance.")
                    },
                    "Strengths": {
                        "type": "string",
                        "description": "Based on the content given, provide maximum of 3 strengths. If there are no strengths, output '1. NONE'"
                    },
                    "Weaknesses": {
                        "type": "string",
                        "description": "Based on the content given, provide maximum of 3 weaknesses. If there are no weaknesses, output '1. NONE'"
                    },
                    "Opportunities": {
                        "type": "string",
                        "description": "Based on the content given, provide maximum of 3 opportunities. If there are no opportunities, output '1. NONE'"
                    },
                    "Threats": {
                        "type": "string",
                        "description": "Based on the content given, provide maximum of 3 threats. If there are no threats, output '1. NONE'."
                    }
                }
            }
        }
]

# function to combine all news articles
combine_stock_news = [
 {
            "name": "combined_news_article_summary",
            "description": "Combine the news articles summaries in a JSON format.",
            "parameters": {
                "type": "object",
                "properties": {
                    "summary_line": {
                        "type": "string",
                        "description": ("Based on the list of summaries given, combine the summary_line from list of summaries interms of "
                                        "correleation with stock price and impact. Do not include its strength or weaknesses or threats or anything about the performance. "
                                        "Do not miss any key infromation that is useful for the user to decide stock performance.")
                    },
                    "Strengths": {
                        "type": "string",
                        "description": ("Based on the list of summaries given, combine the information of strengths and provide top 4 strengths. "
                                        "Do not just combine them as string format but summarize on strengths. If there are no strengths, return 'NONE'. "
                                        "Provide them as 4 bullet points separated by new line.")
                    },
                    "Weaknesses": {
                        "type": "string",
                        "description": ("Based on the list of summaries given, combine the information of weaknesses and provide top 4  weaknesses. "
                                        "Do not just combine them as string format but summarize on weaknesses. Provide them as 4 bullet points separated by new line. "
                                        "If there are no weaknesses, return 'NONE'.")
                    },
                    "Opportunities": {
                        "type": "string",
                        "description": ("Based on the list of summaries given, combine the information of opportunities and provide top 4 opportunities. "
                                        "Do not just combine them as string format but summarize on opportunities. Provide them as 4 bullet points separated by new line. "
                                        "If there are no opportunities, return 'NONE'.")
                    },
                    "Threats": {
                        "type": "string",
                        "description": ("Based on the list of summaries given, combine the information of threats and provide top 4 threats. "
                                        "Do not just combine them as string format but summarize on threats. Provide them as 4 bullet points separated by new line."
                                        "If there are no threats, return 'NONE'.")
                    }
                }
            }
        }
]

# function for sentiment analysis
sentiment_analysis_function = [
    {
        "name": "Provide_news_article_sentiment",
        "description": "Provide the news article sentiment of the stock news in a JSON format.",
        "parameters": {
            "type": "object",
            "properties": {
                "sentiment": {
                    "type": "string",
                    "description": f"{sentiment_analysis_prompt}"
                }
            }
        }
    }
]

# Code for fetching list of articles
with open(articles_data_path, "r") as file:
    json_data = file.read()
data = json.loads(json_data)

# Code for printing number of articles for each
# Extract information based on ticker name
for company in data["companies"]:
    if company["ticker"] == current_ticker:
        print("Name:", company["name"])
        for article in company["articles"]:
            print("Date:", article["date"])
            print("URL:", article["url"])
            print("Content:", len(article["content"]))

# Summarizes all news articles for a particular stock
def summarize_all_news_articles(prompt, function):
    summaries = []

    for company in data["companies"]:
        if company["ticker"] == current_ticker:
            print("Name:", company["name"])
            for article in company["articles"]:
                messages=[{"role": "system", "content": prompt}]
                print("Date:", article["date"])
                print("URL:", article["url"])
                print("Content:", len(article["content"]))

                client = OpenAI()
                messages.append({"role":"user","content":article["content"]})
                completion = client.chat.completions.create(
                  model="gpt-3.5-turbo",
                  messages=messages,
                  functions = function,
                  function_call='auto'
                )
                print("Summarized one news article.")

                args = completion.choices[0].message.function_call.arguments
                try:
                    output = json.loads(args)
                    summaries.append(output)
                except:
                    print ("Incorrect JSON format returned.")
                    time.sleep(10)

    return summaries

# Function to combine all news articles
def combine_all_articles(prompt_to_combine, final_prompt, function):
    client = OpenAI()
    messages=[{"role": "user", "content": prompt_to_combine}]
    messages.append({"role":"user","content":f" {summaries}"})
    completion = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=messages
      )

    combined_summary = completion.choices[0].message.content
    print(len(combined_summary))

    messages=[{"role": "user", "content": final_prompt}]
    messages.append({"role":"user","content": f" {combined_summary}"})

    completion = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=messages,
        functions = function,
        function_call='auto'
      )

    args = completion.choices[0].message.function_call.arguments

    try:
        output = ast.literal_eval(args)
    except:
        output = json.loads(args)
    return {current_ticker:output}

summaries = summarize_all_news_articles(news_articles_prompt, news_article_summarizer_function)

print(summaries)

final_summary = combine_all_articles(prompt_to_combine, final_prompt, combine_stock_news)

file_name = f"combined_summaries_expert_{current_ticker}.json"

with open(file_name, "w") as file:
    json.dump(final_summary, file)

for summary in summaries:
  print(summary["summary_line"])
  print("\nSTRENGTHS")
  print(summary["Strengths"])
  print("\nWEAKNESSES")
  print(summary["Weaknesses"])
  print("\nTHREATS")
  print(summary["Threats"])
  print("\nOPPORTUNITIES")
  print(summary["Opportunities"])
  print("--------------------------------------")

summary = final_summary[current_ticker]
print(summary["summary_line"])
print("\nSTRENGTHS")
print(summary["Strengths"])
print("\nWEAKNESSES")
print(summary["Weaknesses"])
print("\nTHREATS")
print(summary["Threats"])
print("\nOPPORTUNITIES")
print(summary["Opportunities"])
print("--------------------------------------")

def summarize_single_article(prompt, function, content):
    start_time = time.time()
    summaries = []
    messages=[{"role": "system", "content": prompt}]
    client = OpenAI()
    messages.append({"role":"user","content":article["content"]})
    completion = client.chat.completions.create(
      model="gpt-3.5-turbo",
      messages=messages,
      functions = function,
      function_call='auto'
    )
    print("Summarized one news article.")

    args = completion.choices[0].message.function_call.arguments
    try:
        output = json.loads(args)
        summaries.append(output)
    except:
        print ("Incorrect JSON format returned.")
        time.sleep(10)
    end_time = time.time()
    return summaries, end_time-start_time

news_articles_prompt = "You are stock news analyzer. Store key content of the news that impacts profit and loss of the company, Strengths, weaknesses, opportunities, threats."
for company in data["companies"]:
   print("Name:", company["name"])
   for article in company["articles"]:
      print("Date:", article["date"])
      print("URL:", article["url"])
      print("Content:", len(article["content"]))
      _, time_taken = summarize_single_article(news_articles_prompt, news_article_summarizer_function, len(article["content"]))
      print(time_taken)

import matplotlib.pyplot as plt

# Your data
content_length = [3793, 9028, 1244, 2919, 1097, 5527, 288, 2730, 5707, 686, 2049, 2861, 3604, 2732, 2796, 5328, 2737, 2510, 2802, 2591, 2976, 2733, 2760, 4464, 1033, 2714, 2715, 1703, 1696, 1296]
times = [2.32, 3.42, 1.47, 2.52, 2.14, 3.91, 1.73, 3.12, 1.97,  2.73, 3.85, 3.17, 3.97, 3.03, 3.82, 3.96, 2.24, 2.64, 3.92, 3.93, 2.98, 2.78, 2.73, 2.83, 2.02, 4.75, 1.67, 2.56, 7.76, 1.95]
print(len(content_length))
print(len(times))
# Plotting the graph
plt.figure(figsize=(12, 6))
plt.scatter(content_length, times, color='blue', label='Times')
plt.xlabel('Content Length')
plt.ylabel('Times')
plt.title('Content Length vs. Times')
plt.legend()
plt.grid(True)
plt.show()

"""Sentiment Analysis"""

def test_sentiment_analysis():

    sentiment_analysis_actual = []
    sentiment_analysis_predicted = []

    count = 0

    for company in data["companies"]:
      print("Name:", company["name"])
      content_count = 0
      for article in company["articles"]:
          messages=[{"role": "system", "content": prompt}]
          messages.append({"role":"user", "content":article["content"]})
          content_count += len(article["content"])
          sentiment_analysis_actual.append(article["stock_news_sentiment"])
          client = OpenAI()
          completion = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages = messages,
            temperature=1,
            functions = function,
            function_call='auto'
          )

          # count = count + 1
          # print(f"Article number processed: {count}")

          args = completion.choices[0].message.function_call.arguments
          try:
              output = json.loads(args)
              # print(output)
              sentiment_analysis_predicted.append(output['sentiment'])
          except:
              print ("Incorrect JSON format returned.")
              time.sleep(10)
      print(f"Total Content length: {content_count}")
    return sentiment_analysis_actual, sentiment_analysis_predicted

# Commented out IPython magic to ensure Python compatibility.
# %%time
# sentiment_analysis_actual, sentiment_analysis_predicted = test_sentiment_analysis()

import seaborn as sns
from sklearn.metrics import confusion_matrix
import matplotlib.pyplot as plt
# Actual and predicted lists
actual = sentiment_analysis_actual
predicted = sentiment_analysis_predicted

# Define the categories
categories = ["positive", "negative", "neutral"]

# Create confusion matrix
cm = confusion_matrix(actual, predicted, labels=categories)

# Display confusion matrix
plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt="d", xticklabels=categories, yticklabels=categories, cmap="Blues")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion Matrix Temp 1")
plt.show()